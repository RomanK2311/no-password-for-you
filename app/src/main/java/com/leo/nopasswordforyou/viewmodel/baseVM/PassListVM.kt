/* *  No password for you *  Copyright (c) 2024 . All rights reserved. * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation,either version 3 of the License,or * (at your option) any later version. * * You should have received a copy of the GNU General Public License * along with this program.  If not,see <http://www.gnu.org/licenses/>. */package com.leo.nopasswordforyou.viewmodel.baseVMimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.leo.nopasswordforyou.database.passlist.PassListDaoimport com.leo.nopasswordforyou.database.passlist.PassListEntityimport com.leo.nopasswordforyou.util.sorting.SortOrderimport com.leo.nopasswordforyou.util.sorting.Sortingimport com.leo.nopasswordforyou.util.sorting.sortPasswordsimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass PassListVM @Inject constructor(    private val passListDao: PassListDao) : ViewModel() {    var passwordsVault: MutableStateFlow<List<PassListEntity>> = MutableStateFlow(emptyList())    init {        viewModelScope.launch(Dispatchers.Default) {            getPassesVault(SortOrder.Ascending, Sorting.Title) {}        }    }    private fun getPassList(results: (ArrayList<PassListEntity>) -> Unit) {        viewModelScope.launch(Dispatchers.Default) {            val k: ArrayList<PassListEntity> =                passListDao.getPassList() as ArrayList<PassListEntity>            results.invoke(k)        }    }    fun getPassesVault(sortOrder: SortOrder, sortBy: Sorting, success: () -> Unit) {        getPassList {            viewModelScope.launch(Dispatchers.Default) {                sortPasswords(it, sortOrder, sortBy) {                    passwordsVault.value = it                }                success()            }        }    }    fun putPassDevice(        passId: String,        passTitle: String,        passDesc: String,        modify: Long = System.currentTimeMillis(),        onCloud: Boolean,        alias: String,        status: (code: Int) -> Unit    ) {        viewModelScope.launch(Dispatchers.IO) {            putPassList(                passTitle,                passDesc,                passId,                alias,                modify,                onCloud            )            status(0)        }    }    private fun putPassList(        title: String,        description: String,        id: String,        alias: String,        modify: Long,        onCloud: Boolean    ) {        viewModelScope.launch(Dispatchers.IO) {            passListDao.insertNewPass(                PassListEntity(                    title = title,                    desc = description,                    alias = alias,                    passId = id,                    lastModify = modify,                    onCloud = onCloud                )            )        }    }    fun putPassList(passList: List<PassListEntity>, success: () -> Unit) {        viewModelScope.launch {            for (i in passList.indices) {                if (passListDao.getPassList(passList[i].passId) == null) {                    passListDao.insertNewPass(passList[i])                }            }            success()        }    }    fun updatePassList(passListEntity: PassListEntity, success: () -> Unit) {        viewModelScope.launch(Dispatchers.IO) {            passListDao.updatePassList(passListEntity)            success()        }    }    fun deleteFromDevice(indexList: List<Int>, deletePass: (String) -> Unit, success: () -> Unit) {        viewModelScope.launch(Dispatchers.Default) {            for (index in indexList.indices) {                deletePass(passwordsVault.value[index].passId)                passListDao.deletePassList(passwordsVault.value[index])            }            success()        }    }}